#!/usr/bin/env python

from __future__ import print_function
import io
import sys

import logging

import morfessor
from morfessor import BaselineModel
from morfessor import CognateConstructionMethods, WILDCARD
from morfessor.data import DataPoint

def main(argv):
    alpha = float(argv[0])
    data = []
    for line in io.open(argv[1], encoding='utf-8'):
        _, src, trg = line.strip('\n').split('\t')
        if len(src) == 0:
            src = WILDCARD
        if len(trg) == 0:
            trg = WILDCARD
        compound = CognateConstructionMethods.type(src, trg)
        data.append(DataPoint(count=1, compound=compound, splitlocs=()))

    model = BaselineModel(corpusweight=alpha, constr_class=CognateConstructionMethods)
    model.cost.set_edit_weight(10)
    model.load_data(data)
    model.train_batch()

    with io.open(argv[2], 'w', encoding='utf-8') as outf:
        for c,_,w in model.get_segmentations():
            print("{} {}".format(c, " + ".join(CognateConstructionMethods.to_string(w1) for w1 in w)), file=outf)
    for w, c in model.cost.edit_cost.counts.most_common():
        if c > 0:
            print('{}\t{}'.format(w, c))
    print('final cost components', file=sys.stderr)
    print('src  {}'.format(model.cost.src_cost.cost()), file=sys.stderr)
    print('trg  {}'.format(model.cost.trg_cost.cost()), file=sys.stderr)
    print('edit {}'.format(model.cost.edit_cost.cost()), file=sys.stderr)
    print('src.lex  {}'.format(model.cost.src_cost._lexicon_coding.get_cost()), file=sys.stderr)
    print('trg.lex  {}'.format(model.cost.trg_cost._lexicon_coding.get_cost()), file=sys.stderr)
    print('edit.lex {}'.format(model.cost.edit_cost._lexicon_coding.get_cost()), file=sys.stderr)
    print('src.cor  {}'.format(model.cost.src_cost._corpus_coding.get_cost()), file=sys.stderr)
    print('trg.cor  {}'.format(model.cost.trg_cost._corpus_coding.get_cost()), file=sys.stderr)
    print('edit.cor {}'.format(model.cost.edit_cost._corpus_coding.get_cost()), file=sys.stderr)
    print('src.lex.bnd  {}'.format(model.cost.src_cost._lexicon_coding.boundaries), file=sys.stderr)
    print('trg.lex.bnd  {}'.format(model.cost.trg_cost._lexicon_coding.boundaries), file=sys.stderr)
    print('edit.lex.bnd {}'.format(model.cost.edit_cost._lexicon_coding.boundaries), file=sys.stderr)
    print('src.cor.bnd  {}'.format(model.cost.src_cost._corpus_coding.boundaries), file=sys.stderr)
    print('trg.cor.bnd  {}'.format(model.cost.trg_cost._corpus_coding.boundaries), file=sys.stderr)
    print('edit.cor.bnd {}'.format(model.cost.edit_cost._corpus_coding.boundaries), file=sys.stderr)
    print('edit.lex.tok {}'.format(model.cost.edit_cost._lexicon_coding.tokens), file=sys.stderr)
    print('edit.lex.logtoksum {}'.format(model.cost.edit_cost._lexicon_coding.logtokensum), file=sys.stderr)

class opts(dict):
    log_file = None
    verbose = 1
    progress = True

if __name__ == "__main__":
    o = opts()
    o['progress'] = True

    morfessor.configure_logger(logging.getLogger(), o)
    main(sys.argv[1:])
