#!/usr/bin/env python

from __future__ import print_function
import io
import math
import sys

import logging

import morfessorcognate
from morfessorcognate.cognate import CognateModel
from morfessorcognate import CognateConstructionMethods, WILDCARD
from morfessorcognate.data import DataPoint
from morfessorcognate.io import MorfessorIO

FIVEDOT = '\u2059' # 5-dot punctuation

def main(argv):
    modelfile = argv[0]
    side = argv[1]
    assert side in ('src', 'trg')
    infile = argv[2]
    outfile = argv[3]
    use_epsilon = True

    mio = MorfessorIO()
    model = mio.read_binary_model_file(modelfile)
    with open(infile, 'r') as lines:
        with open(outfile, 'w') as outfobj:
            for line in lines:
                word = line.strip('\n')
                if use_epsilon:
                    # append the end epsilon
                    word += FIVEDOT
                if side == 'src':
                    src = word
                    trg = WILDCARD
                else:
                    src = WILDCARD
                    trg = word
                compound = CognateConstructionMethods.type(src, trg)
                constructions, logp = model.viterbi_segment(compound, addcount=0)

                if side == 'src':
                    morphs = [cons.src for cons in constructions]
                else:
                    morphs = [cons.trg for cons in constructions]
                morphs = [morph.replace(FIVEDOT, '') for morph in morphs]
                morphs = [morph for morph in morphs if morph != '']
                outfobj.write(' '.join(morphs))
                outfobj.write('\n')


class opts(dict):
    log_file = None
    verbose = 1
    progress = True

if __name__ == "__main__":
    o = opts()
    o['progress'] = True

    morfessorcognate.configure_logger(logging.getLogger(), o)
    main(sys.argv[1:])
